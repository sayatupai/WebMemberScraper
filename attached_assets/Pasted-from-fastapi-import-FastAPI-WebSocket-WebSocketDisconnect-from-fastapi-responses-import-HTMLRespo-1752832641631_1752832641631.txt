from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import os
import asyncio

from telethon.sync import TelegramClient
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeInvalidError

# --- PENTING: API KEY DITANAMKAN DI SINI ---
# API Key ini digunakan oleh aplikasi, bukan oleh pengguna.
# Dapatkan satu kali dari my.telegram.org dan masukkan di sini atau di Replit Secrets.
API_ID = 1234567  # GANTI DENGAN API ID ANDA
API_HASH = '0123456789abcdef0123456789abcdef' # GANTI DENGAN API HASH ANDA

app = FastAPI()
templates = Jinja2Templates(directory="templates")

# Halaman utama
@app.get("/", response_class=HTMLResponse)
async def read_root(request):
    return templates.TemplateResponse("index.html", {"request": request})

# Logika utama ada di WebSocket
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    client = None
    phone_code_hash = None

    try:
        while True:
            data = await websocket.receive_json()
            action = data.get("action")

            if action == "login_phone":
                phone = data.get("phone")
                session_file = f"sessions/{phone}.session"
                client = TelegramClient(session_file, API_ID, API_HASH)
                await client.connect()

                if await client.is_user_authorized():
                    await websocket.send_json({"status": "login_success", "message": "Login otomatis berhasil dari sesi sebelumnya."})
                    # Lanjutkan ke logika dashboard...
                else:
                    try:
                        result = await client.send_code_request(phone)
                        phone_code_hash = result.phone_code_hash
                        await websocket.send_json({"status": "code_sent"})
                    except Exception as e:
                        await websocket.send_json({"status": "error", "message": f"Gagal mengirim kode: {e}"})

            elif action == "login_code":
                code = data.get("code")
                phone = data.get("phone")
                try:
                    await client.sign_in(phone, code, phone_code_hash=phone_code_hash)
                    await websocket.send_json({"status": "login_success", "message": "Login berhasil!"})
                except SessionPasswordNeededError:
                    await websocket.send_json({"status": "password_needed"})
                except PhoneCodeInvalidError:
                    await websocket.send_json({"status": "error", "message": "Kode yang Anda masukkan salah."})
                except Exception as e:
                    await websocket.send_json({"status": "error", "message": f"Error: {e}"})

            elif action == "login_password":
                password = data.get("password")
                try:
                    await client.sign_in(password=password)
                    await websocket.send_json({"status": "login_success", "message": "Login dengan password berhasil!"})
                except Exception as e:
                    await websocket.send_json({"status": "error", "message": f"Password salah: {e}"})
            
            # FITUR BARU: Cari Grup
            elif action == "search_groups":
                keyword = data.get("keyword")
                if client and await client.is_user_authorized():
                    await websocket.send_json({"status": "info", "message": f"Mencari grup dengan kata kunci: {keyword}..."})
                    # Implementasi pencarian grup di sini
                    # Ini adalah contoh sederhana, logika lebih kompleks mungkin diperlukan
                    all_dialogs = await client.get_dialogs(limit=200)
                    found_groups = [
                        {"id": d.id, "title": d.title} 
                        for d in all_dialogs 
                        if keyword.lower() in d.title.lower() and (d.is_group or d.is_channel)
                    ]
                    await websocket.send_json({"status": "groups_found", "groups": found_groups})
                else:
                    await websocket.send_json({"status": "error", "message": "Harap login terlebih dahulu."})


    except WebSocketDisconnect:
        print("Client disconnected")
        if client:
            await client.disconnect()
    except Exception as e:
        print(f"An error occurred: {e}")
        if client:
            await client.disconnect()

# Buat folder sessions jika belum ada
if not os.path.exists('sessions'):
    os.makedirs('sessions')